{"clear_ods": {"payment": "DELETE FROM pdmitry.ods_payment_final WHERE EXTRACT(YEAR FROM pay_date::DATE) = {{ execution_date.year }}", "mdm": "DELETE FROM pdmitry.ods_mdm_user_final WHERE EXTRACT(YEAR FROM registered_at::DATE) = {{ execution_date.year }}", "payment_hashed": "DELETE FROM pdmitry.ods_payment_hashed_final WHERE EXTRACT(YEAR FROM pay_date::DATE) = {{ execution_date.year }}", "mdm_hashed": "DELETE FROM pdmitry.ods_mdm_hashed_final WHERE EXTRACT(YEAR FROM registered_at::DATE) = {{ execution_date.year }}"}, "fill_ods": {"payment": "INSERT INTO pdmitry.ods_payment_final\n        SELECT * FROM pdmitry.stg_payment_final \n        WHERE EXTRACT(YEAR FROM pay_date::DATE) = {{ execution_date.year }}", "mdm": "INSERT INTO pdmitry.ods_mdm_user_final\n        SELECT * FROM mdm.user \n        WHERE EXTRACT(YEAR FROM registered_at::DATE) = {{ execution_date.year }}"}, "fill_hashed": {"ods_payment": "INSERT INTO pdmitry.ods_payment_hashed_final\n        SELECT *, '{{ execution_date }}'::TIMESTAMP AS LOAD_DATE FROM pdmitry.ods_view_payment_final \n        WHERE EXTRACT(YEAR FROM pay_date::DATE) = {{ execution_date.year }}", "ods_mdm": "INSERT INTO pdmitry.ods_mdm_hashed_final\n        SELECT *, '{{ execution_date }}'::TIMESTAMP AS LOAD_DATE FROM pdmitry.ods_view_mdm_final \n        WHERE EXTRACT(YEAR FROM registered_at::DATE) = {{ execution_date.year }}"}, "hub": {"user": "INSERT INTO pdmitry.dds_hub_user_final (user_pk, user_key, load_date, record_source)\n    SELECT user_pk, user_key, load_date, record_source\n    FROM pdmitry.view_hub_user_etl_final", "billing_period": "insert into pdmitry.dds_hub_billing_period_final (BILLING_PERIOD_PK, BILLING_PERIOD_KEY, LOAD_DATE, RECORD_SOURCE)\n    SELECT BILLING_PERIOD_PK, BILLING_PERIOD_KEY, LOAD_DATE, RECORD_SOURCE\n    FROM pdmitry.view_hub_billing_period_etl_final", "account": "insert into pdmitry.dds_hub_account_final (ACCOUNT_PK, ACCOUNT_KEY, LOAD_DATE, RECORD_SOURCE)\n    SELECT ACCOUNT_PK, ACCOUNT_KEY, LOAD_DATE, RECORD_SOURCE\n    FROM pdmitry.view_hub_account_etl_final"}, "link": {"payment": "insert into pdmitry.dds_link_payment_final (PAY_PK, USER_PK, ACCOUNT_PK, BILLING_PERIOD_PK, LOAD_DATE, RECORD_SOURCE)\n    SELECT PAY_PK, USER_PK, ACCOUNT_PK, BILLING_PERIOD_PK, LOAD_DATE, RECORD_SOURCE\n    FROM pdmitry.view_link_payment_etl_final"}, "sat": {"user": "insert into pdmitry.dds_sat_user_final (user_pk, user_hashdif, phone, effective_from, load_date, record_source)\n    with source_data as (\n    select a.USER_PK, a.USER_HASHDIF, a.phone, a.EFFECTIVE_FROM, a.LOAD_DATE, a.RECORD_SOURCE from pdmitry.ods_payment_hashed_final as a\n    WHERE EXTRACT(YEAR FROM a.pay_date::DATE) = {{ execution_date.year }}\n    ),\n    update_records as (\n    select a.USER_PK, a.USER_HASHDIF, a.phone, a.EFFECTIVE_FROM, a.LOAD_DATE, a.RECORD_SOURCE from pdmitry.dds_sat_user_final as a\n    join source_data as b on a.USER_PK = b.USER_PK AND a.LOAD_DATE <= (SELECT max(LOAD_DATE) from source_data)\n    ),\n    latest_records as (\n     select * from (\n                   select c.USER_PK, c.USER_HASHDIF, c.LOAD_DATE,\n                   CASE WHEN RANK() OVER (PARTITION BY c.USER_PK ORDER BY c.LOAD_DATE DESC) = 1\n                   THEN 'Y' ELSE 'N' END AS latest\n            FROM update_records as c\n        ) as s\n        WHERE latest = 'Y'\n        ),\n    records_to_insert as (\n     select distinct e.USER_PK, e.USER_HASHDIF, e.phone, e.EFFECTIVE_FROM, e.LOAD_DATE, e.RECORD_SOURCE\n     from source_data as e\n     left join latest_records on latest_records.USER_HASHDIF=e.USER_HASHDIF and latest_records.USER_PK=e.USER_PK\n     where latest_records.USER_HASHDIF is null\n      )\n select * from records_to_insert", "link_payment": "insert into pdmitry.dds_sat_link_payment_final (PAY_PK, pay_doc_num, pay_doc_type, PAYMENT_HASHDIF, pay_date, sum, EFFECTIVE_FROM, LOAD_DATE, RECORD_SOURCE)\n    with source_data as (\n    select a.PAY_PK, a.pay_doc_num, a.pay_doc_type, a.PAYMENT_HASHDIF, a.pay_date, a.sum, a.EFFECTIVE_FROM, a.LOAD_DATE, a.RECORD_SOURCE\n    from pdmitry.ods_payment_hashed_final as a\n    WHERE EXTRACT(YEAR FROM a.pay_date::DATE) = {{ execution_date.year }}\n    ),\n     update_records as (\n        select a.PAY_PK, a.PAYMENT_HASHDIF, a.pay_date, a.sum, a.EFFECTIVE_FROM, a.LOAD_DATE, a.RECORD_SOURCE from pdmitry.dds_sat_link_payment_final as a\n        join source_data as b on a.PAY_PK = b.PAY_PK AND a.LOAD_DATE <= (SELECT max(LOAD_DATE) from source_data)\n     ),\n     latest_records as (\n         select * from (\n                       select c.PAY_PK, c.PAYMENT_HASHDIF, c.LOAD_DATE,\n                       CASE WHEN RANK() over (partition by c.PAY_PK order by c.LOAD_DATE DESC) = 1\n                       THEN 'Y' ELSE 'N' END AS latest\n                FROM update_records as c\n            ) as s\n            WHERE latest = 'Y'\n            ),\n     records_to_insert as (\n         select distinct e.PAY_PK, e.pay_doc_num, e.pay_doc_type, e.PAYMENT_HASHDIF, e.pay_date, e.sum, e.EFFECTIVE_FROM, e.LOAD_DATE, e.RECORD_SOURCE\n         from source_data as e\n         left join latest_records on latest_records.PAYMENT_HASHDIF=e.PAYMENT_HASHDIF and latest_records.PAY_PK=e.PAY_PK\n         where latest_records.PAYMENT_HASHDIF is null\n          )\n     select * from records_to_insert", "mdm": "insert into pdmitry.dds_sat_mdm_final (USER_PK, legal_type, district, registered_at, billing_mode, is_vip, mdm_hashdif, effective_from, LOAD_DATE, RECORD_SOURCE)\n    with source_data as (\n    select a.USER_PK, a.legal_type, a.district, a.registered_at, a.billing_mode, a.is_vip, a.mdm_hashdif, a.effective_from, a.LOAD_DATE, a.RECORD_SOURCE from pdmitry.ods_mdm_hashed_final as a\n    WHERE EXTRACT(YEAR FROM a.effective_from) = {{ execution_date.year }}\n    ),\n     update_records as (\n        select a.USER_PK, a.legal_type, a.district, a.registered_at, a.billing_mode, a.is_vip, a.mdm_hashdif, a.effective_from, a.LOAD_DATE, a.RECORD_SOURCE from pdmitry.dds_sat_mdm_final as a\n        join source_data as b on a.USER_PK = b.USER_PK AND a.LOAD_DATE <= (SELECT max(LOAD_DATE) from source_data)\n     ),\n     latest_records as (\n         select * from (\n                       select c.USER_PK, c.MDM_HASHDIF, c.LOAD_DATE,\n                       CASE WHEN RANK() over (partition by c.USER_PK order by c.LOAD_DATE DESC) = 1\n                       THEN 'Y' ELSE 'N' END AS latest\n                FROM update_records as c\n            ) as s\n            WHERE latest = 'Y'\n            ),\n     records_to_insert as (\n         select distinct e.USER_PK, e.legal_type, e.district, e.registered_at, e.billing_mode, e.is_vip, e.mdm_hashdif,e.effective_from, e.LOAD_DATE, e.RECORD_SOURCE\n         from source_data as e\n         left join latest_records on latest_records.MDM_HASHDIF=e.MDM_HASHDIF and latest_records.USER_PK=e.USER_PK\n         where latest_records.MDM_HASHDIF is null\n          )\n     select * from records_to_insert"}, "payment_report_temp": {"table": "drop table if exists pdmitry.payment_report_tmp_final_{{ execution_date.year }};\n    create table pdmitry.payment_report_tmp_final_{{ execution_date.year }} as\n    with raw_data as (\n        select\n            legal_type,\n            district,\n            billing_mode,\n            extract (year from registered_at) as registration_year,\n            is_vip,\n            extract (year from to_date(billing_period_key, 'YYYY-MM')) as billing_year,\n            billing_period_key,\n            sum\n        from pdmitry.dds_link_payment_final p\n        join pdmitry.dds_hub_billing_period_final hbp on p.billing_period_pk=hbp.billing_period_pk\n        join pdmitry.dds_hub_user_final usr on p.user_pk=usr.user_pk\n        join pdmitry.dds_sat_link_payment_final pmnt on p.pay_pk=pmnt.pay_pk\n        join pdmitry.dds_sat_mdm_final mdm on usr.user_pk=mdm.user_pk\n    )\n    select billing_year, legal_type, district, billing_mode, registration_year, is_vip, sum(sum) as payment_sum\n    from raw_data\n    --where billing_year = {{ execution_date.year }}\n    group by billing_year, legal_type, district, registration_year, billing_mode, is_vip\n    order by billing_year, legal_type, district, registration_year, billing_mode, is_vip; "}, "payment_report_dim": {"billing_year": "insert into pdmitry.payment_report_dim_billing_year_final(billing_year_key)\n                select distinct billing_year as billing_year_key \n                from pdmitry.payment_report_tmp_final_{{ execution_date.year }}\n                left join pdmitry.payment_report_dim_billing_year_final on billing_year_key=billing_year\n                where billing_year_key is null", "district": "insert into pdmitry.payment_report_dim_district_final(district_key)\n                select distinct district as district_key\n                from pdmitry.payment_report_tmp_final_{{ execution_date.year }}\n                left join pdmitry.payment_report_dim_district_final on district_key=district\n                where district_key is null", "billing_mode": "insert into pdmitry.payment_report_dim_billing_mode_final(billing_mode_key)\n                select distinct billing_mode as billing_mode_key \n                from pdmitry.payment_report_tmp_final_{{ execution_date.year }}\n                left join pdmitry.payment_report_dim_billing_mode_final on billing_mode_key=billing_mode\n                where billing_mode_key is null ", "legal_type": " insert into pdmitry.payment_report_dim_legal_type_final(legal_type_key)\n                select distinct legal_type as legal_type_key \n                from pdmitry.payment_report_tmp_final_{{ execution_date.year }}\n                left join pdmitry.payment_report_dim_legal_type_final on legal_type_key=legal_type\n                where legal_type_key is null", "registration_year": " insert into pdmitry.payment_report_dim_registration_year_final(registration_year_key)\n                select distinct registration_year as registration_year_key\n                from pdmitry.payment_report_tmp_final_{{ execution_date.year }}\n                left join pdmitry.payment_report_dim_registration_year_final on registration_year_key=registration_year\n                where registration_year_key is null"}, "payment_report_fct": {"table": "truncate pdmitry.payment_report_fct_final;\n                INSERT INTO pdmitry.payment_report_fct_final(billing_year_id, legal_type_id, district_id, billing_mode_id, registration_year_id, is_vip, payment_sum)\n                select biy.id, lt.id, d.id, bm.id, ry.id, is_vip, raw.payment_sum\n                from pdmitry.payment_report_tmp_final_{{ execution_date.year }} raw\n                join pdmitry.payment_report_dim_billing_year_final biy on raw.billing_year=biy.billing_year_key\n                join pdmitry.payment_report_dim_legal_type_final lt on raw.legal_type=lt.legal_type_key\n                join pdmitry.payment_report_dim_district_final d on raw.district=d.district_key\n                join pdmitry.payment_report_dim_billing_mode_final bm on raw.billing_mode=bm.billing_mode_key\n                join pdmitry.payment_report_dim_registration_year_final ry on raw.registration_year=ry.registration_year_key"}, "drop_payment_report_temp": {"table": "drop table if exists pdmitry.payment_report_tmp_final_{{ execution_date.year }}; "}}